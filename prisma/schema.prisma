// Prisma Schema for SiteSense
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model User {
  id                        String    @id @default(uuid())
  email                     String    @unique
  passwordHash              String?
  firstName                 String?
  lastName                  String?
  role                      UserRole  @default(PROJECT_MANAGER)
  companyId                 String
  phone                     String?
  isActive                  Boolean   @default(true)
  emailVerified             Boolean   @default(false)
  emailVerificationToken    String?   @unique
  emailVerificationExpires  DateTime?
  twoFactorEnabled          Boolean   @default(false)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  // Relations
  company           Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Audit fields
  invoicesSubmitted Invoice[] @relation("SubmittedBy")
  invoicesReviewed  Invoice[] @relation("ReviewedBy")
  paymentsCreated   PaymentRun[] @relation("CreatedBy")
  auditLogs         AuditLog[]

  @@index([companyId])
  @@index([email])
  @@index([emailVerificationToken])
  @@map("users")
}

enum UserRole {
  ADMIN
  FINANCE
  PROJECT_MANAGER
  SUBCONTRACTOR
}

// ============================================
// COMPANY
// ============================================

model Company {
  id                    String   @id @default(uuid())
  name                  String
  companyNumber         String?
  vatNumber             String?
  cisRegistrationNumber String?
  addressLine1          String?
  addressLine2          String?
  city                  String?
  postcode              String?
  country               String   @default("GB")
  phone                 String?
  email                 String?
  website               String?
  subscriptionTier      SubscriptionTier @default(STARTER)
  subscriptionStatus    SubscriptionStatus @default(TRIAL)
  trialEndsAt           DateTime?
  stripeCustomerId      String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  users               User[]
  subcontractors      Subcontractor[]
  projects            Project[]
  invoices            Invoice[]
  paymentRuns         PaymentRun[]
  integrations        Integration[]
  documents           Document[]
  auditLogs           AuditLog[]

  @@index([subscriptionStatus])
  @@map("companies")
}

enum SubscriptionTier {
  STARTER
  PROFESSIONAL
  BUSINESS
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELLED
  PAST_DUE
}

// ============================================
// SUBCONTRACTOR
// ============================================

model Subcontractor {
  id                        String    @id @default(uuid())
  companyId                 String

  // Basic Details
  companyName               String
  legalEntityType           LegalEntityType  // LIMITED_COMPANY, SOLE_TRADER, etc.
  companyNumber             String?   // Companies House number
  vatNumber                 String?
  contactName               String    // REQUIRED for communications
  email                     String    // REQUIRED for invoicing/communications
  phone                     String    // REQUIRED for emergencies
  website                   String?
  numberOfEmployees         Int?
  tradeSpecialties          String[]  // ["Electrician", "Plumber", "HVAC"]
  utr                       String    // Unique Taxpayer Reference
  ir35Status                IR35Status?  // INSIDE, OUTSIDE, NOT_APPLICABLE

  // Address
  addressLine1              String?
  addressLine2              String?
  city                      String?
  postcode                  String?
  country                   String    @default("GB")

  // Emergency Contact
  emergencyContactName      String?
  emergencyContactPhone     String?

  // CIS Compliance
  cisStatus                 CISStatus?
  cisVerifiedAt             DateTime?
  cisVerificationExpiresAt  DateTime?
  cisVerificationReference  String?
  cisDeductionRate          Float?    @db.DoublePrecision // 0%, 20%, or 30%

  // CSCS & Qualifications
  cscsCardNumber            String?
  cscsCardType              String?   // "Green CSCS", "Blue CSCS", "Gold CSCS", etc.
  cscsCardExpiresAt         DateTime?

  // Health & Safety Accreditations
  chasAccredited            Boolean   @default(false)
  chasExpiresAt             DateTime?
  safeContractorAccredited  Boolean   @default(false)
  safeContractorExpiresAt   DateTime?
  constructionlineAccredited Boolean  @default(false)
  constructionlineExpiresAt DateTime?
  otherAccreditations       String[]  // ["NICEIC", "Gas Safe", etc.]

  // Insurance & Compliance
  publicLiabilityExpiresAt  DateTime?
  publicLiabilityAmount     Float?    @db.DoublePrecision
  publicLiabilityPolicyNumber String?
  publicLiabilityInsurer    String?
  publicLiabilityDocUrl     String?

  employersLiabilityExpiresAt DateTime?
  employersLiabilityPolicyNumber String?
  employersLiabilityInsurer String?
  employersLiabilityDocUrl  String?

  professionalIndemnityExpiresAt DateTime?
  professionalIndemnityPolicyNumber String?
  professionalIndemnityInsurer String?
  professionalIndemnityDocUrl String?

  // Payment Terms
  paymentTermsDays          Int       @default(30) // 30, 60, 90 days
  retentionPercentage       Float     @default(0) @db.DoublePrecision // 0-10%
  earlyPaymentDiscount      Float?    @db.DoublePrecision

  // Bank Details (encrypted in production)
  bankName                  String?
  bankAccountName           String?
  bankAccountNumber         String?   // Last 4 digits only for display
  bankSortCode              String?

  // Performance Metrics
  performanceScore          Float     @default(0) @db.DoublePrecision
  riskScore                 String?   // GREEN, AMBER, RED
  totalPaid                 Float     @default(0) @db.DoublePrecision
  totalInvoices             Int       @default(0)
  onTimeDeliveryRate        Float     @default(0) @db.DoublePrecision
  invoiceAccuracyRate       Float     @default(0) @db.DoublePrecision
  disputeCount              Int       @default(0)
  averageResponseTime       Int?      // hours

  // GDPR Compliance
  dataConsentGiven          Boolean   @default(false)
  dataConsentDate           DateTime?
  dataProcessingPurpose     String?   @db.Text // "CIS verification, payment processing"
  dataRetentionUntil        DateTime? // 7 years after last transaction per HMRC
  lastDataAccess            DateTime?
  gdprDataExportedAt        DateTime?
  scheduledForDeletion      Boolean   @default(false)
  deletionRequestedAt       DateTime?
  legalBasisForProcessing   String?   @default("Contract") // Contract, Legal Obligation, Legitimate Interest

  // Status & Meta
  isActive                  Boolean   @default(true)
  archivedAt                DateTime?
  notes                     String?   @db.Text
  internalRating            Int?      // 1-5 stars
  tags                      String[]  // ["Preferred", "High Value", "Specialist"]
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  // Relations
  company                   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoices                  Invoice[]
  cisVerifications          CISVerification[]
  projectAssignments        ProjectSubcontractor[]

  @@index([companyId])
  @@index([utr])
  @@index([legalEntityType])
  @@index([cisVerificationExpiresAt])
  @@index([cscsCardExpiresAt])
  @@index([chasExpiresAt])
  @@index([publicLiabilityExpiresAt])
  @@index([dataRetentionUntil])
  @@index([scheduledForDeletion])
  @@map("subcontractors")
}

enum CISStatus {
  GROSS
  STANDARD
  HIGHER
  NOT_VERIFIED
}

enum LegalEntityType {
  LIMITED_COMPANY      // Ltd
  SOLE_TRADER         // Self-employed individual
  PARTNERSHIP         // Traditional partnership
  LLP                 // Limited Liability Partnership
  PLC                 // Public Limited Company
  CHARITY             // Charitable organization
  OTHER               // Other business structure
}

enum IR35Status {
  OUTSIDE             // Outside IR35 - treated as self-employed
  INSIDE              // Inside IR35 - treated as employee for tax
  NOT_APPLICABLE      // Not relevant (e.g., limited companies)
}

// ============================================
// PROJECT
// ============================================

model Project {
  id                      String   @id @default(uuid())
  companyId               String

  // Basic Details
  name                    String
  description             String?  @db.Text
  projectNumber           String?  @unique // Unique project reference
  status                  ProjectStatus @default(PLANNING)

  // Client Information
  clientName              String?
  clientCompany           String?
  clientEmail             String?
  clientPhone             String?

  // Site Address
  addressLine1            String?
  addressLine2            String?
  city                    String?
  postcode                String?
  country                 String   @default("GB")
  siteContactName         String?  // On-site contact
  siteContactPhone        String?

  // Project Type & Contract
  projectType             ProjectType?  // NEW_BUILD, REFURBISHMENT, etc.
  contractType            ContractType? // FIXED_PRICE, TIME_MATERIALS, etc.
  contractValue           Float?   @db.DoublePrecision
  retentionPercentage     Float    @default(5) @db.DoublePrecision // Typical 5% retention

  // Budget & Cost Tracking
  budget                  Float?   @db.DoublePrecision
  actualCost              Float    @default(0) @db.DoublePrecision
  approvedVariations      Float    @default(0) @db.DoublePrecision
  pendingVariations       Float    @default(0) @db.DoublePrecision

  // Dates
  startDate               DateTime?
  estimatedCompletionDate DateTime?
  actualCompletionDate    DateTime?
  handoverDate            DateTime?

  // Health & Safety
  principalContractor     String?  // CDM 2015 requirement
  principalDesigner       String?  // CDM 2015 requirement
  hsePlanRequired         Boolean  @default(true)
  hsePlanApproved         Boolean  @default(false)
  hsePlanApprovedDate     DateTime?
  f10NotificationNumber   String?  // HSE F10 notification for notifiable projects
  rampsRequired           Boolean  @default(true)  // Risk Assessments & Method Statements

  // Planning & Building Control
  planningPermissionRef   String?
  planningPermissionDate  DateTime?
  buildingControlRef      String?
  buildingControlBody     String?  // Local Authority or Approved Inspector

  // Insurance
  contractWorksInsurance  Float?   @db.DoublePrecision
  insurancePolicyNumber   String?
  insuranceExpiryDate     DateTime?

  // Performance Metrics
  onSchedule              Boolean  @default(true)
  daysDelay               Int      @default(0)
  qualityScore            Float?   @db.DoublePrecision // 1-5 rating
  clientSatisfaction      Float?   @db.DoublePrecision // 1-5 rating

  // Status & Meta
  isArchived              Boolean  @default(false)
  archivedAt              DateTime?
  notes                   String?  @db.Text
  tags                    String[] // ["High Value", "Fast Track", "Complex"]
  createdBy               String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  company                 Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  invoices                Invoice[]
  projectSubcontractors   ProjectSubcontractor[]

  @@index([companyId])
  @@index([status])
  @@index([projectNumber])
  @@index([startDate])
  @@index([estimatedCompletionDate])
  @@map("projects")
}

enum ProjectStatus {
  PLANNING      // Pre-construction planning phase
  ACTIVE        // Construction underway
  ON_HOLD       // Temporarily paused
  SNAGGING      // Final fixes and snagging
  COMPLETED     // Handed over to client
  CANCELLED     // Project cancelled
}

enum ProjectType {
  NEW_BUILD           // New construction from ground up
  REFURBISHMENT       // Major refurbishment
  EXTENSION           // Building extension
  CONVERSION          // Building conversion (e.g., loft, garage)
  RENOVATION          // General renovation
  FIT_OUT             // Interior fit-out
  INFRASTRUCTURE      // Roads, utilities, etc.
  DEMOLITION          // Demolition work
  MAINTENANCE         // Planned maintenance
  OTHER               // Other project type
}

enum ContractType {
  FIXED_PRICE         // Lump sum fixed price
  TIME_MATERIALS      // Time and materials
  COST_PLUS           // Cost plus fee
  MEASURE_TERM        // Measured term contract
  FRAMEWORK           // Framework agreement
  NEC                 // NEC contract
  JCT                 // JCT contract
  OTHER               // Other contract type
}

// ============================================
// PROJECT SUBCONTRACTOR (Many-to-Many)
// ============================================

model ProjectSubcontractor {
  id                String   @id @default(uuid())
  projectId         String
  subcontractorId   String

  // Role & Scope
  role              String?  // "Electrical Contractor", "Main Plumber", "HVAC Specialist"
  scopeOfWork       String?  @db.Text
  tradePackage      String?  // "First Fix Electrical", "Final Plumbing", etc.

  // Commercial Terms
  contractValue     Float?   @db.DoublePrecision
  agreedRate        Float?   @db.DoublePrecision // Day rate or package rate
  rateType          String?  @default("DAY_RATE") // DAY_RATE, FIXED_PRICE, MEASURED
  paymentTerms      String?  // "30 days", "Stage payments"
  retentionHeld     Float    @default(0) @db.DoublePrecision

  // Schedule
  startDate         DateTime?
  endDate           DateTime?
  actualStartDate   DateTime?
  actualEndDate     DateTime?

  // Status & Performance
  status            ProjectSubcontractorStatus @default(ASSIGNED)
  performanceRating Float?   @db.DoublePrecision // 1-5 rating
  onSchedule        Boolean  @default(true)
  qualityIssues     Int      @default(0)

  // Health & Safety
  rampsSubmitted    Boolean  @default(false)
  rampsApproved     Boolean  @default(false)
  inductionCompleted Boolean @default(false)
  inductionDate     DateTime?

  // Meta
  notes             String?  @db.Text
  assignedBy        String?  // User ID who assigned
  assignedAt        DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  subcontractor     Subcontractor @relation(fields: [subcontractorId], references: [id], onDelete: Cascade)

  @@unique([projectId, subcontractorId]) // Each subcontractor once per project
  @@index([projectId])
  @@index([subcontractorId])
  @@index([status])
  @@map("project_subcontractors")
}

enum ProjectSubcontractorStatus {
  ASSIGNED          // Assigned to project
  MOBILIZING        // Preparing to start
  ACTIVE            // Currently working
  DEMOBILIZED       // Finished and left site
  SUSPENDED         // Temporarily stopped
  REMOVED           // Removed from project
}

// ============================================
// INVOICE
// ============================================

model Invoice {
  id                String   @id @default(uuid())
  companyId         String
  subcontractorId   String
  projectId         String?
  invoiceNumber     String
  invoiceDate       DateTime
  dueDate           DateTime?
  amount            Float    @db.DoublePrecision
  cisDeduction      Float    @default(0) @db.DoublePrecision
  netPayment        Float    @db.DoublePrecision
  description       String?  @db.Text
  status            InvoiceStatus @default(SUBMITTED)
  paymentDate       DateTime?
  paymentReference  String?
  invoiceFileUrl    String?
  validationStatus  ValidationStatus?
  validationRiskScore String?
  validationResult  Json?
  submittedBy       String?
  reviewedBy        String?
  reviewedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subcontractor     Subcontractor @relation(fields: [subcontractorId], references: [id])
  project           Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  submitter         User?    @relation("SubmittedBy", fields: [submittedBy], references: [id])
  reviewer          User?    @relation("ReviewedBy", fields: [reviewedBy], references: [id])
  documents         InvoiceDocument[]
  paymentRuns       PaymentRunInvoice[]

  @@unique([subcontractorId, invoiceNumber])
  @@index([companyId])
  @@index([subcontractorId])
  @@index([projectId])
  @@index([status])
  @@index([invoiceNumber])
  @@map("invoices")
}

enum InvoiceStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  PAID
  REJECTED
}

enum ValidationStatus {
  PENDING
  PASSED
  REVIEW_REQUIRED
  FAILED
}

// ============================================
// INVOICE DOCUMENTS
// ============================================

model InvoiceDocument {
  id           String   @id @default(uuid())
  invoiceId    String
  documentType DocumentType
  fileName     String
  fileUrl      String
  fileSize     Int?
  mimeType     String?
  uploadedBy   String?
  createdAt    DateTime @default(now())

  // Relations
  invoice      Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_documents")
}

enum DocumentType {
  INVOICE
  TIMESHEET
  PHOTO
  SUPPORTING_DOC
}

// ============================================
// PAYMENT RUNS
// ============================================

model PaymentRun {
  id                String   @id @default(uuid())
  companyId         String
  name              String
  scheduledDate     DateTime
  status            PaymentRunStatus @default(DRAFT)
  totalAmount       Float    @default(0) @db.DoublePrecision
  totalCisDeduction Float    @default(0) @db.DoublePrecision
  netPayment        Float    @default(0) @db.DoublePrecision
  invoiceCount      Int      @default(0)
  exportedAt        DateTime?
  paidAt            DateTime?
  createdBy         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  creator           User?    @relation("CreatedBy", fields: [createdBy], references: [id])
  invoices          PaymentRunInvoice[]

  @@index([companyId])
  @@index([status])
  @@map("payment_runs")
}

enum PaymentRunStatus {
  DRAFT
  READY
  EXPORTED
  PAID
}

model PaymentRunInvoice {
  paymentRunId String
  invoiceId    String

  // Relations
  paymentRun   PaymentRun @relation(fields: [paymentRunId], references: [id], onDelete: Cascade)
  invoice      Invoice    @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@id([paymentRunId, invoiceId])
  @@index([paymentRunId])
  @@index([invoiceId])
  @@map("payment_run_invoices")
}

// ============================================
// CIS VERIFICATIONS
// ============================================

model CISVerification {
  id                    String   @id @default(uuid())
  subcontractorId       String
  verificationDate      DateTime
  verificationReference String?
  utr                   String
  cisStatus             CISStatus
  deductionRate         Float?   @db.DoublePrecision
  verificationResponse  Json?
  verifiedBy            String?
  expiresAt             DateTime?
  createdAt             DateTime @default(now())

  // Relations
  subcontractor         Subcontractor @relation(fields: [subcontractorId], references: [id], onDelete: Cascade)

  @@index([subcontractorId])
  @@index([expiresAt])
  @@map("cis_verifications")
}

// ============================================
// INTEGRATIONS
// ============================================

model Integration {
  id               String   @id @default(uuid())
  companyId        String
  provider         IntegrationProvider
  accessToken      String?  @db.Text
  refreshToken     String?  @db.Text
  tokenExpiresAt   DateTime?
  tenantId         String?
  isActive         Boolean  @default(true)
  settings         Json?
  lastSyncAt       DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, provider])
  @@index([companyId])
  @@map("integrations")
}

enum IntegrationProvider {
  HMRC
  XERO
  QUICKBOOKS
}

// ============================================
// DOCUMENTS (General Document Management)
// ============================================

model Document {
  id           String   @id @default(uuid())
  companyId    String

  // Document Details
  title        String
  description  String?  @db.Text
  fileName     String
  fileUrl      String
  fileSize     Int?     // in bytes
  mimeType     String?
  category     DocumentCategory

  // Entity Relationship (polymorphic)
  entityType   String?  // "Subcontractor", "Project", "Invoice", etc.
  entityId     String?  // ID of the related entity

  // Metadata
  uploadedBy   String?
  tags         String[]
  isArchived   Boolean  @default(false)
  archivedAt   DateTime?
  expiresAt    DateTime? // For time-sensitive documents like certificates

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([entityType, entityId])
  @@index([category])
  @@index([expiresAt])
  @@map("documents")
}

enum DocumentCategory {
  INVOICE
  CONTRACT
  INSURANCE_CERTIFICATE
  CIS_CERTIFICATE
  QUALIFICATION
  HEALTH_SAFETY
  PHOTO
  REPORT
  OTHER
}

// ============================================
// AUDIT LOG
// ============================================

model AuditLog {
  id         String   @id @default(uuid())
  companyId  String?
  userId     String?
  entityType String
  entityId   String
  action     String
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?  @db.Text
  createdAt  DateTime @default(now())

  // Relations
  company    Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([companyId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================
// SESSION (for NextAuth.js)
// ============================================

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([sessionToken])
  @@map("sessions")
}
